var F=crypto.createHmac||(await import("node:crypto")).createHmac,Q=crypto.createHash||(await import("node:crypto")).createHash;typeof F>"u"&&typeof Q>"u"&&console.error("ultralight-S3 Module: Crypto functions are not available, please report the issue with necessary description: https://github.com/sentienhq/ultralight-s3/issues");var P="AWS4-HMAC-SHA256",U="aws4_request",K="s3",v="2",E="UNSIGNED-PAYLOAD",W="application/octet-stream",x="application/xml",S="application/json",X=["accessKeyId","secretAccessKey","sessionToken","password"],C=5*1024*1024,y="x-amz-content-sha256",V="x-amz-date",Z="host",J="Authorization",f="Content-Type",w="Content-Length",N="etag",M="last-modified",c="ultralight-s3 Module: ",ee=`${c}accessKeyId must be a non-empty string`,te=`${c}secretAccessKey must be a non-empty string`,se=`${c}endpoint must be a non-empty string`,re=`${c}bucketName must be a non-empty string`,L=`${c}key must be a non-empty string`,T=`${c}uploadId must be a non-empty string`,k=`${c}parts must be a non-empty array`,j=`${c}Each part must have a partNumber (number) and ETag (string)`,H=`${c}data must be a Buffer or string`,B=`${c}prefix must be a string`,z=`${c}maxKeys must be a positive integer`,G=`${c}delimiter must be a string`,ne={contents:!0},oe=_=>`%${_.charCodeAt(0).toString(16).toUpperCase()}`,q=_=>encodeURIComponent(_).replace(/[!'()*]/g,oe),m=_=>q(_).replace(/%2F/g,"/"),O=class{constructor({accessKeyId:e,secretAccessKey:t,endpoint:s,bucketName:r,region:o="auto",maxRequestSizeInBytes:i=C,requestAbortTimeout:a=void 0,logger:u=void 0}){this.getBucketName=()=>this.bucketName,this.setBucketName=n=>{this.bucketName=n},this.getRegion=()=>this.region,this.setRegion=n=>{this.region=n},this.getEndpoint=()=>this.endpoint,this.setEndpoint=n=>{this.endpoint=n},this.getMaxRequestSizeInBytes=()=>this.maxRequestSizeInBytes,this.setMaxRequestSizeInBytes=n=>{this.maxRequestSizeInBytes=n},this.getProps=()=>({accessKeyId:this.accessKeyId,secretAccessKey:this.secretAccessKey,region:this.region,bucket:this.bucketName,endpoint:this.endpoint,maxRequestSizeInBytes:this.maxRequestSizeInBytes,requestAbortTimeout:this.requestAbortTimeout,logger:this.logger}),this.setProps=n=>{this._validateConstructorParams(n.accessKeyId,n.secretAccessKey,n.bucketName,n.endpoint),this.accessKeyId=n.accessKeyId,this.secretAccessKey=n.secretAccessKey,this.region=n.region||"auto",this.bucketName=n.bucketName,this.endpoint=n.endpoint,this.maxRequestSizeInBytes=n.maxRequestSizeInBytes||C,this.requestAbortTimeout=n.requestAbortTimeout,this.logger=n.logger},this._validateConstructorParams(e,t,s,r),this.accessKeyId=e,this.secretAccessKey=t,this.endpoint=s,this.bucketName=r,this.region=o,this.maxRequestSizeInBytes=i,this.requestAbortTimeout=a,this.logger=u}_validateConstructorParams(e,t,s,r){if(typeof e!="string"||e.trim().length===0)throw new TypeError(ee);if(typeof t!="string"||t.trim().length===0)throw new TypeError(te);if(typeof s!="string"||s.trim().length===0)throw new TypeError(se);if(typeof r!="string"||r.trim().length===0)throw new TypeError(re)}_checkMethodHeadnGet(e){if(e!=="GET"&&e!=="HEAD")throw this._log("error",`${c}method must be either GET or HEAD`),new Error("method must be either GET or HEAD")}_checkKey(e){if(typeof e!="string"||e.trim().length===0)throw this._log("error",L),new TypeError(L)}_checkDelimiter(e){if(typeof e!="string"||e.trim().length===0)throw this._log("error",G),new TypeError(G)}_checkPrefix(e){if(typeof e!="string")throw this._log("error",B),new TypeError(B)}_checkMaxKeys(e){if(typeof e!="number"||e<=0)throw this._log("error",z),new TypeError(z)}_checkOpts(e){if(typeof e!="object")throw this._log("error",`${c}opts must be an object`),new TypeError(`${c}opts must be an object`)}_log(e,t,s={}){if(this.logger&&typeof this.logger[e]=="function"){let r=a=>typeof a!="object"||a===null?a:Object.keys(a).reduce((u,n)=>(X.includes(n.toLowerCase())?u[n]="[REDACTED]":typeof a[n]=="object"&&a[n]!==null?u[n]=r(a[n]):u[n]=a[n],u),Array.isArray(a)?[]:{}),o=r(s),i={timestamp:new Date().toISOString(),level:e,message:t,...o,context:r({bucketName:this.bucketName,region:this.region,endpoint:this.endpoint,accessKeyId:this.accessKeyId?`${this.accessKeyId.substring(0,4)}...`:void 0})};this.logger[e](i)}}async getContentLength(e){this._checkKey(e);let t={[y]:E},s=m(e),{url:r,headers:o}=await this._sign("HEAD",s,{},t,""),a=(await this._sendRequest(r,"HEAD",o)).headers.get(w);return a?parseInt(a,10):0}async bucketExists(){let e={[y]:E},{url:t,headers:s}=await this._sign("HEAD","",{},e,""),r=await this._sendRequest(t,"HEAD",s);return!!(r.ok&&r.status===200)}async fileExists(e){this._checkKey(e);let t={[y]:E},s=m(e),{url:r,headers:o}=await this._sign("HEAD",s,{},t,"");try{let i=await fetch(r,{method:"HEAD",headers:o});return i.ok&&i.status===200?!0:(i.status===404||this._handleErrorResponse(i),!1)}catch(i){let a=i instanceof Error?i.message:String(i);throw this._log("error",`${c}Failed to check if file exists: ${a}`),new Error(`${c}Failed to check if file exists: ${a}`)}}async _sign(e,t,s,r,o){let i=new Date().toISOString().replace(/[:-]|\.\d{3}/g,""),a=typeof t=="string"&&t.length>0?new URL(t,this.endpoint):new URL(this.endpoint);a.pathname=`/${encodeURI(this.bucketName)}${a.pathname}`,r[y]=o?await I(o):E,r[V]=i,r[Z]=a.host;let u=this._buildCanonicalHeaders(r),n=Object.keys(r).map(d=>d.toLowerCase()).sort().join(";"),p=await this._buildCanonicalRequest(e,a,s,u,n,o),h=await this._buildStringToSign(i,p),l=await this._calculateSignature(i,h),g=this._buildAuthorizationHeader(i,n,l);return r[J]=g,{url:a.toString(),headers:r}}_buildCanonicalHeaders(e){return Object.entries(e).map(([t,s])=>`${t.toLowerCase()}:${String(s).trim()}`).sort().join(`
`)}async _buildCanonicalRequest(e,t,s,r,o,i){return[e,t.pathname,this._buildCanonicalQueryString(s),`${r}
`,o,i?await I(i):E].join(`
`)}async _buildStringToSign(e,t){let s=[e.slice(0,8),this.region,K,U].join("/");return[P,e,s,await I(t)].join(`
`)}async _calculateSignature(e,t){let s=await this._getSignatureKey(e.slice(0,8));return A(s,t,"hex")}_buildAuthorizationHeader(e,t,s){let r=[e.slice(0,8),this.region,K,U].join("/");return[`${P} Credential=${this.accessKeyId}/${r}`,`SignedHeaders=${t}`,`Signature=${s}`].join(", ")}async list(e="/",t="",s=1e3,r="GET",o={}){this._checkDelimiter(e),this._checkPrefix(t),this._checkMaxKeys(s),this._checkMethodHeadnGet(r),this._checkOpts(o),this._log("info",`Listing objects in ${t}`);let i={"list-type":v,"max-keys":String(s),...o};t.length>0&&(i.prefix=t);let a={[f]:S,[y]:E},u=e==="/"?e:q(e),{url:n,headers:p}=await this._sign("GET",u,i,a,""),h=`${n}?${new URLSearchParams(i)}`,l=await this._sendRequest(h,"GET",p),g=await l.text();if(r==="HEAD"){let R=l.headers.get(w),b=l.headers.get(M),Y=l.headers.get(N);return{size:R?+R:void 0,mtime:b?new Date(b):void 0,ETag:Y||void 0}}let d=$(g),D=d.listBucketResult||d.error||d;return D.contents||D}async listMultiPartUploads(e="/",t="",s="GET",r={}){var o,i,a;this._checkDelimiter(e),this._checkPrefix(t),this._checkMethodHeadnGet(s),this._checkOpts(r),this._log("info",`Listing multipart uploads in ${t}`);let u={uploads:"",...r},n={[f]:S,[y]:E},p=e==="/"?e:q(e),{url:h,headers:l}=await this._sign("GET",p,u,n,""),g=`${h}?${new URLSearchParams(u)}`,d=await this._sendRequest(g,"GET",l),D=await d.text();if(s==="HEAD")return{size:+((o=d.headers.get(w))!==null&&o!==void 0?o:"0"),mtime:new Date((i=d.headers.get(M))!==null&&i!==void 0?i:""),ETag:(a=d.headers.get(N))!==null&&a!==void 0?a:""};let R=$(D),b=R.listMultipartUploadsResult||R.error||R;return b.uploads||b}async get(e,t={}){this._checkKey(e),this._log("info",`Getting object ${e}`);let s={[f]:S,[y]:E},r=m(e),{url:o,headers:i}=await this._sign("GET",r,t,s,"");return(await this._sendRequest(o,"GET",i)).text()}async getResponse(e,t=!0,s=0,r=this.maxRequestSizeInBytes,o={}){this._checkKey(e);let i=o,a={[f]:S,[y]:E,...t?{}:{range:`bytes=${s}-${r-1}`}},u=m(e),{url:n,headers:p}=await this._sign("GET",u,i,a,""),h=`${n}?${new URLSearchParams(i)}`;return this._sendRequest(h,"GET",p)}async put(e,t){if(this._checkKey(e),!(t instanceof Buffer||typeof t=="string"))throw this._log("error",H),new TypeError(H);this._log("info",`Uploading object ${e}`);let s=typeof t=="string"?Buffer.byteLength(t):t.length,r={[w]:s},o=m(e),{url:i,headers:a}=await this._sign("PUT",o,{},r,t);return await this._sendRequest(i,"PUT",a,t)}async getMultipartUploadId(e,t=W){if(this._checkKey(e),typeof t!="string")throw this._log("error",`${c}fileType must be a string`),new TypeError(`${c}fileType must be a string`);this._log("info",`Initiating multipart upload for object ${e}`);let s={uploads:""},r={[f]:t,[y]:E},o=m(e),{url:i,headers:a}=await this._sign("POST",o,s,r,""),u=`${i}?${new URLSearchParams(s)}`,p=await(await this._sendRequest(u,"POST",a)).text(),h=$(p);if(typeof h=="object"&&h!==null&&"error"in h&&typeof h.error=="object"&&h.error!==null&&"message"in h.error){let l=String(h.error.message);throw this._log("error",`${c}Failed to abort multipart upload: ${l}`),new Error(`${c}Failed to abort multipart upload: ${l}`)}if(typeof h=="object"&&h!==null){if(!h.initiateMultipartUploadResult||!h.initiateMultipartUploadResult.uploadId)throw this._log("error",`${c}Failed to create multipart upload: no uploadId in response`),new Error(`${c}Failed to create multipart upload: Missing upload ID in response`);return h.initiateMultipartUploadResult.uploadId}else throw this._log("error",`${c}Failed to create multipart upload: unexpected response format`),new Error(`${c}Failed to create multipart upload: Unexpected response format`)}async uploadPart(e,t,s,r,o={}){this._validateUploadPartParams(e,t,s,r,o);let i={uploadId:s,partNumber:r,...o},a={[w]:t.length},u=m(e),{url:n,headers:p}=await this._sign("PUT",u,i,a,t),h=`${n}?${new URLSearchParams(i)}`,g=(await this._sendRequest(h,"PUT",p,t)).headers.get("etag")||"";return{partNumber:r,ETag:g}}_validateUploadPartParams(e,t,s,r,o){if(this._checkKey(e),!(t instanceof Buffer||typeof t=="string"))throw this._log("error",H),new TypeError(H);if(typeof s!="string"||s.trim().length===0)throw this._log("error",T),new TypeError(T);if(!Number.isInteger(r)||r<=0)throw this._log("error",`${c}partNumber must be a positive integer`),new TypeError(`${c}partNumber must be a positive integer`);this._checkOpts(o)}async completeMultipartUpload(e,t,s){if(this._checkKey(e),typeof t!="string"||t.trim().length===0)throw this._log("error",T),new TypeError(T);if(!Array.isArray(s)||s.length===0)throw this._log("error",k),new TypeError(k);if(!s.every(d=>typeof d.partNumber=="number"&&typeof d.ETag=="string"))throw this._log("error",j),new TypeError(j);this._log("info",`Complete multipart upload ${t} for object ${e}`);let r={uploadId:t},o=this._buildCompleteMultipartUploadXml(s),i={[f]:x,[w]:Buffer.byteLength(o).toString(),[y]:await I(o)},a=m(e),{url:u,headers:n}=await this._sign("POST",a,r,i,o),p=`${u}?${new URLSearchParams(r)}`,l=await(await this._sendRequest(p,"POST",n,o)).text(),g=$(l);if(typeof g=="object"&&g!==null&&"error"in g&&typeof g.error=="object"&&g.error!==null&&"message"in g.error){let d=String(g.error.message);throw this._log("error",`${c}Failed to abort multipart upload: ${d}`),new Error(`${c}Failed to abort multipart upload: ${d}`)}return g.completeMultipartUploadResult}async abortMultipartUpload(e,t){if(this._checkKey(e),typeof t!="string"||t.trim().length===0)throw this._log("error",T),new TypeError(T);this._log("info",`Aborting multipart upload ${t} for object ${e}`);let s={uploadId:t},r={[f]:x,[y]:E};try{let o=m(e),{url:i,headers:a}=await this._sign("DELETE",o,s,r,""),u=`${i}?${new URLSearchParams(s)}`,n=await this._sendRequest(u,"DELETE",a);if(n.ok){let p=await n.text(),h=$(p);if(typeof h=="object"&&h!==null&&"error"in h&&typeof h.error=="object"&&h.error!==null&&"message"in h.error){let l=String(h.error.message);throw this._log("error",`${c}Failed to abort multipart upload: ${l}`),new Error(`${c}Failed to abort multipart upload: ${l}`)}return{status:"Aborted",key:e,uploadId:t,response:h}}else throw this._log("error",`${c}Abort request failed with status ${n.status}`),new Error(`${c}Abort request failed with status ${n.status}`)}catch(o){let i=o instanceof Error?o.message:String(o);throw this._log("error",`${c}Failed to abort multipart upload for key ${e}: ${i}`),new Error(`${c}Failed to abort multipart upload for key ${e}: ${i}`)}}_buildCompleteMultipartUploadXml(e){return`
      <CompleteMultipartUpload>
        ${e.map(t=>`
          <Part>
            <PartNumber>${t.partNumber}</PartNumber>
            <ETag>${t.ETag}</ETag>
          </Part>
        `).join("")}
      </CompleteMultipartUpload>
    `}async delete(e){this._checkKey(e),this._log("info",`Deleting object ${e}`);let t={[f]:S,[y]:E},s=m(e),{url:r,headers:o}=await this._sign("DELETE",s,{},t,""),i=await this._sendRequest(r,"DELETE",o);return i.status===204||i.status===200}async _sendRequest(e,t,s,r){this._log("info",`Sending ${t} request to ${e}, headers: ${JSON.stringify(s)}`);let o=await fetch(e,{method:t,headers:s,body:r,signal:this.requestAbortTimeout!==void 0?AbortSignal.timeout(this.requestAbortTimeout):void 0});return o.ok||await this._handleErrorResponse(o),o}async _handleErrorResponse(e){let t=await e.text(),s=e.headers.get("x-amz-error-code")||"Unknown",r=e.headers.get("x-amz-error-message")||e.statusText;throw this._log("error",`${c}Request failed with status ${e.status}: ${s} - ${r},err body: ${t}`),new Error(`${c}Request failed with status ${e.status}: ${s} - ${r}, err body: ${t}`)}_buildCanonicalQueryString(e){return Object.keys(e).length<1?"":Object.keys(e).sort().map(t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`).join("&")}async _getSignatureKey(e){let t=await A(`AWS4${this.secretAccessKey}`,e),s=await A(t,this.region),r=await A(s,K);return A(r,U)}},I=async _=>{let e=Q("sha256");return e.update(_),e.digest("hex")},A=async(_,e,t)=>{let s=F("sha256",_);return s.update(e),s.digest(t)},$=_=>{let e=o=>o.replace(/&quot;/g,'"').replace(/&apos;/g,"'").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&"),t={},s=/<(\w)([-\w]+)(?:\/|[^>]*>((?:(?!<\1)[\s\S])*)<\/\1\2)>/gm,r;for(;r=s.exec(_);){let[,o,i,a]=r,u=o.toLowerCase()+i,n=a!=null?$(a):!0;typeof n=="string"?t[u]=e(n):Array.isArray(t[u])?t[u].push(n):t[u]=t[u]!=null?[t[u],n]:ne[u]?[n]:n}return Object.keys(t).length?t:e(_)};var ie=O;export{c as ERROR_PREFIX,O as S3,ie as default};
//# sourceMappingURL=index.min.js.map
