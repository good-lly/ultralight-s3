var G=crypto.createHmac||await import("node:crypto").then(g=>g.createHmac),z=crypto.createHash||await import("node:crypto").then(g=>g.createHash);typeof G>"u"&&typeof z>"u"&&console.error("FemtoS3 Module: Crypto functions are not available, please report the issue with necessary description: https://github.com/sentienhq/femtoS3.js/issues");var N="AWS4-HMAC-SHA256",U="aws4_request",P="s3",F="2",m="UNSIGNED-PAYLOAD",Q="application/octet-stream",x="application/xml",b="application/json",Y=["accessKeyId","secretAccessKey","sessionToken","password"],_="x-amz-content-sha256",v="x-amz-date",W="host",X="Authorization",f="Content-Type",R="Content-Length",K="etag",L="last-modified",i="FemtoS3 Module: ",V=`${i}accessKeyId must be a non-empty string`,Z=`${i}secretAccessKey must be a non-empty string`,J=`${i}endpoint must be a non-empty string`,k=`${i}bucketName must be a non-empty string`,l=`${i}key must be a non-empty string`,T=`${i}uploadId must be a non-empty string`,j=`${i}parts must be a non-empty array`,M=`${i}Each part must have a PartNumber (number) and ETag (string)`,S=`${i}data must be a Buffer or string`,D=`${i}path must be a string`,H=`${i}prefix must be a string`,B=`${i}maxKeys must be a positive integer`,ee={contents:!0},te=g=>`%${g.charCodeAt(0).toString(16).toUpperCase()}`;function q(g){return encodeURIComponent(g).replace(/[!'()*]/g,te)}function w(g){return q(g).replace(/%2F/g,"/")}var C=class{constructor({accessKeyId:e,secretAccessKey:t,endpoint:r,bucketName:s,region:o="auto",maxRequestSizeInBytes:n=5*1024*1024,requestAbortTimeout:a=void 0,logger:u=null}){this._validateConstructorParams(e,t,r,s),this.accessKeyId=e,this.secretAccessKey=t,this.endpoint=r,this.bucketName=s,this.region=o,this.maxRequestSizeInBytes=n,this.requestAbortTimeout=a,this.logger=u}_validateConstructorParams(e,t,r,s){if(typeof e!="string"||e.trim().length===0)throw new TypeError(V);if(typeof t!="string"||t.trim().length===0)throw new TypeError(Z);if(typeof r!="string"||r.trim().length===0)throw new TypeError(J);if(typeof s!="string"||s.trim().length===0)throw new TypeError(k)}_log(e,t,r={}){if(this.logger&&typeof this.logger[e]=="function"){let s=a=>typeof a!="object"||a===null?a:Object.keys(a).reduce((u,c)=>(Y.includes(c.toLowerCase())?u[c]="[REDACTED]":typeof a[c]=="object"&&a[c]!==null?u[c]=s(a[c]):u[c]=a[c],u),Array.isArray(a)?[]:{}),o=s(r),n={timestamp:new Date().toISOString(),level:e,message:t,...o,context:s({bucketName:this.bucketName,region:this.region,endpoint:this.endpoint,accessKeyId:this.accessKeyId?`${this.accessKeyId.substring(0,4)}...`:void 0})};this.logger[e](n)}}getBucketName=()=>this.bucketName;setBucketName=e=>{this.bucketName=e};getRegion=()=>this.region;setRegion=e=>{this.region=e};getEndpoint=()=>this.endpoint;setEndpoint=e=>{this.endpoint=e};getMaxRequestSizeInBytes=()=>this.maxRequestSizeInBytes;setMaxRequestSizeInBytes=e=>{this.maxRequestSizeInBytes=e};getProps=()=>({accessKeyId:this.accessKeyId,secretAccessKey:this.secretAccessKey,region:this.region,bucket:this.bucketName,endpoint:this.endpoint,maxRequestSizeInBytes:this.maxRequestSizeInBytes,requestAbortTimeout:this.requestAbortTimeout,logger:this.logger});setProps=e=>{this._validateConstructorParams(e.accessKeyId,e.secretAccessKey,e.endpoint),this.accessKeyId=e.accessKeyId,this.secretAccessKey=e.secretAccessKey,this.region=e.region,this.bucketName=e.bucket,this.endpoint=e.endpoint,this.maxRequestSizeInBytes=e.maxRequestSizeInBytes,this.requestAbortTimeout=e.requestAbortTimeout,this.logger=e.logger};async getContentLength(e){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);let t={[_]:m},r=w(e),{url:s,headers:o}=await this._sign("HEAD",r,{},t,""),a=(await this._sendRequest(s,"HEAD",o)).headers.get(R);return a?parseInt(a,10):0}async bucketExists(){let e={[_]:m},{url:t,headers:r}=await this._sign("HEAD","",{},e,""),s=await this._sendRequest(t,"HEAD",r);return!!(s.ok&&s.status===200)}async fileExists(e){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);let t={[_]:m},r=w(e),{url:s,headers:o}=await this._sign("HEAD",r,{},t,"");try{let n=await fetch(s,{method:"HEAD",headers:o});if(n.ok&&n.status===200)return!0;if(n.status===404)return!1;this._handleErrorResponse(n)}catch(n){throw this._log("error",`${i}Failed to check if file exists: ${n.message}`),new Error(`${i}Failed to check if file exists: ${n.message}`)}}async _sign(e,t,r,s,o){let n=new Date().toISOString().replace(/[:-]|\.\d{3}/g,""),a=t.length>0?new URL(t,this.endpoint):new URL(this.endpoint);a.pathname=`/${encodeURI(this.bucketName)}${a.pathname}`,s[_]=o?await I(o):m,s[v]=n,s[W]=a.host;let u=this._buildCanonicalHeaders(s),c=Object.keys(s).map(y=>y.toLowerCase()).sort().join(";"),d=await this._buildCanonicalRequest(e,a,r,u,c,o),h=await this._buildStringToSign(n,d),E=await this._calculateSignature(n,h),p=this._buildAuthorizationHeader(n,c,E);return s[X]=p,{url:a.toString(),headers:s}}_buildCanonicalHeaders(e){return Object.entries(e).map(([t,r])=>`${t.toLowerCase()}:${String(r).trim()}`).sort().join(`
`)}async _buildCanonicalRequest(e,t,r,s,o,n){return[e,t.pathname,this._buildCanonicalQueryString(r),`${s}
`,o,n?await I(n):m].join(`
`)}async _buildStringToSign(e,t){let r=[e.slice(0,8),this.region,P,U].join("/");return[N,e,r,await I(t)].join(`
`)}async _calculateSignature(e,t){let r=await this._getSignatureKey(e.slice(0,8));return A(r,t,"hex")}_buildAuthorizationHeader(e,t,r){let s=[e.slice(0,8),this.region,P,U].join("/");return[`${N} Credential=${this.accessKeyId}/${s}`,`SignedHeaders=${t}`,`Signature=${r}`].join(", ")}async list(e="/",t="",r=1e3,s="GET",o={}){if(typeof e!="string"||e.trim().length===0)throw this._log("error",D),new TypeError(D);if(typeof t!="string")throw this._log("error",H),new TypeError(H);if(!Number.isInteger(r)||r<=0)throw this._log("error",B),new TypeError(B);if(s!=="GET"&&s!=="HEAD")throw this._log("error",`${i}method must be either GET or HEAD`),new TypeError(`${i}method must be either GET or HEAD`);if(typeof o!="object")throw this._log("error",`${i}opts must be an object`),new TypeError(`${i}opts must be an object`);this._log("info",`Listing objects in ${e}`);let n={"list-type":F,"max-keys":String(r),...o};t.length>0&&(n.prefix=t);let a={[f]:b,[_]:m},u=e==="/"?e:q(e),{url:c,headers:d}=await this._sign("GET",u,n,a,""),h=`${c}?${new URLSearchParams(n)}`,E=await this._sendRequest(h,"GET",d),p=await E.text();if(s==="HEAD")return{size:+E.headers.get(R),mtime:new Date(E.headers.get(L)),etag:E.headers.get(K)};let y=$(p),O=y.listBucketResult||y.error||y;return O.contents||O}async listMultiPartUploads(e="/",t="",r="GET",s={}){if(typeof e!="string"||e.trim().length===0)throw this._log("error",D),new TypeError(D);if(typeof t!="string")throw this._log("error",H),new TypeError(H);if(r!=="GET"&&r!=="HEAD")throw this._log("error",`${i}method must be either GET or HEAD`),new TypeError(`${i}method must be either GET or HEAD`);if(typeof s!="object")throw this._log("error",`${i}opts must be an object`),new TypeError(`${i}opts must be an object`);this._log("info",`Listing multipart uploads in ${e}`);let o={uploads:"",...s},n={[f]:b,[_]:m},a=e==="/"?e:q(e),{url:u,headers:c}=await this._sign("GET",a,o,n,""),d=`${u}?${new URLSearchParams(o)}`,h=await this._sendRequest(d,"GET",c),E=await h.text();if(r==="HEAD")return{size:+h.headers.get(R),mtime:new Date(h.headers.get(L)),etag:h.headers.get(K)};let p=$(E),y=p.listMultipartUploadsResult||p.error||p;return y.uploads||y}async get(e,t={}){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);let r={[f]:b,[_]:m};this._log("info",`Getting object ${e}`);let s=w(e),{url:o,headers:n}=await this._sign("GET",s,t,r,"");return(await this._sendRequest(o,"GET",n)).text()}async getStream(e,t=!0,r=0,s=this.maxRequestSizeInBytes,o={}){let n=t?o:{partNumber:r,...o},a={[f]:b,[_]:m,...t?{}:{range:`bytes=${r*s}-${(r+1)*s-1}`}},u=w(e),{url:c,headers:d}=await this._sign("GET",u,n,a,""),h=`${c}?${new URLSearchParams(n)}`;return(await this._sendRequest(h,"GET",d)).body}async put(e,t){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);if(!(t instanceof Buffer||typeof t=="string"))throw this._log("error",S),new TypeError(S);this._log("info",`Uploading object ${e}`);let r=typeof t=="string"?Buffer.byteLength(t):t.length,s={[R]:r},o=w(e),{url:n,headers:a}=await this._sign("PUT",o,{},s,t);return await this._sendRequest(n,"PUT",a,t)}async getMultipartUploadId(e,t=Q){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);if(typeof t!="string")throw this._log("error",`${i}fileType must be a string`),new TypeError(`${i}fileType must be a string`);this._log("info",`Initiating multipart upload for object ${e}`);let r={uploads:""},s={[f]:t,[_]:m},o=w(e),{url:n,headers:a}=await this._sign("POST",o,r,s,""),u=`${n}?${new URLSearchParams(r)}`,d=await(await this._sendRequest(u,"POST",a)).text(),h=$(d);if(h.error)throw this._log("error",`${i}Failed to create multipart upload: ${h.error.message}`),new Error(`${i}Failed to create multipart upload: ${h.error.message}`);if(!h.initiateMultipartUploadResult||!h.initiateMultipartUploadResult.uploadId)throw this._log("error",`${i}Failed to create multipart upload: no uploadId in response`),new Error(`${i}Failed to create multipart upload: Missing upload ID in response`);return h.initiateMultipartUploadResult.uploadId}async uploadPart(e,t,r,s,o={}){this._validateUploadPartParams(e,t,r,s,o);let n={uploadId:r,partNumber:s,...o},a={[R]:t.length},u=w(e),{url:c,headers:d}=await this._sign("PUT",u,n,a,t),h=`${c}?${new URLSearchParams(n)}`;return{etag:(await this._sendRequest(h,"PUT",d,t)).headers.get("etag"),partNumber:s}}_validateUploadPartParams(e,t,r,s,o){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);if(!(t instanceof Buffer||typeof t=="string"))throw this._log("error",S),new TypeError(S);if(typeof r!="string"||r.trim().length===0)throw this._log("error",T),new TypeError(T);if(!Number.isInteger(s)||s<=0)throw this._log("error",`${i}partNumber must be a positive integer`),new TypeError(`${i}partNumber must be a positive integer`);if(typeof o!="object")throw this._log("error",`${i}opts must be an object`),new TypeError(`${i}opts must be an object`)}async completeMultipartUpload(e,t,r){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);if(typeof t!="string"||t.trim().length===0)throw this._log("error",T),new TypeError(T);if(!Array.isArray(r)||r.length===0)throw this._log("error",j),new TypeError(j);if(!r.every(y=>typeof y.PartNumber=="number"&&typeof y.ETag=="string"))throw this._log("error",M),new TypeError(M);this._log("info",`Complete multipart upload ${t} for object ${e}`);let s={uploadId:t},o=this._buildCompleteMultipartUploadXml(r),n={[f]:x,[R]:Buffer.byteLength(o).toString(),[_]:await I(o)},a=w(e),{url:u,headers:c}=await this._sign("POST",a,s,n,o),d=`${u}?${new URLSearchParams(s)}`,E=await(await this._sendRequest(d,"POST",c,o)).text(),p=$(E);if(p.error)throw this._log("error",`${i}Failed to complete multipart upload: ${p.error.message}`),new Error(`${i}Failed to complete multipart upload: ${p.error.message}`);return p.completeMultipartUploadResult}async abortMultipartUpload(e,t){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);if(typeof t!="string"||t.trim().length===0)throw this._log("error",T),new TypeError(T);this._log("info",`Aborting multipart upload ${t} for object ${e}`);let r={uploadId:t},s={[f]:x,[_]:m};try{let o=w(e),{url:n,headers:a}=await this._sign("DELETE",o,r,s,""),u=`${n}?${new URLSearchParams(r)}`,c=await this._sendRequest(u,"DELETE",a);if(c.ok){let d=await c.text(),h=$(d);if(h.error)throw this._log("error",`${i}Failed to abort multipart upload: ${h.error.message}`),new Error(`${i}Failed to abort multipart upload: ${h.error.message}`);return{status:"Aborted",key:e,uploadId:t,response:h}}else throw this._log("error",`${i}Abort request failed with status ${c.status}`),new Error(`${i}Abort request failed with status ${c.status}`)}catch(o){throw this._log("error",`${i}Failed to abort multipart upload for key ${e}: ${o.message}`),new Error(`${i}Failed to abort multipart upload for key ${e}: ${o.message}`)}}_buildCompleteMultipartUploadXml(e){return`
      <CompleteMultipartUpload>
        ${e.map(t=>`
          <Part>
            <PartNumber>${t.PartNumber}</PartNumber>
            <ETag>${t.ETag}</ETag>
          </Part>
        `).join("")}
      </CompleteMultipartUpload>
    `}async delete(e){if(typeof e!="string"||e.trim().length===0)throw this._log("error",l),new TypeError(l);this._log("info",`Deleting object ${e}`);let t={[f]:b,[_]:m},r=w(e),{url:s,headers:o}=await this._sign("DELETE",r,{},t,"");return(await this._sendRequest(s,"DELETE",o)).text()}async _sendRequest(e,t,r,s=null){this._log("info",`Sending ${t} request to ${e}, headers: ${JSON.stringify(r)}`);let o=await fetch(e,{method:t,headers:r,body:s,signal:this.requestAbortTimeout!==void 0?AbortSignal.timeout(this.requestAbortTimeout):void 0});return o.ok||await this._handleErrorResponse(o),o}async _handleErrorResponse(e){let t=await e.text(),r=e.headers.get("x-amz-error-code")||"Unknown",s=e.headers.get("x-amz-error-message")||e.statusText;throw this._log("error",`${i}Request failed with status ${e.status}: ${r} - ${s},err body: ${t}`),new Error(`${i}Request failed with status ${e.status}: ${r} - ${s}, err body: ${t}`)}_buildCanonicalQueryString(e){return Object.keys(e).length<1?"":Object.keys(e).sort().map(t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`).join("&")}async _getSignatureKey(e){let t=await A(`AWS4${this.secretAccessKey}`,e),r=await A(t,this.region),s=await A(r,P);return A(s,U)}},I=async g=>{let e=z("sha256");return e.update(g),e.digest("hex")},A=async(g,e,t)=>{let r=G("sha256",g);return r.update(e),r.digest(t)},$=g=>{let e=o=>o.replace(/&quot;/g,'"').replace(/&apos;/g,"'").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&"),t={},r=/<(\w)([-\w]+)(?:\/|[^>]*>((?:(?!<\1)[\s\S])*)<\/\1\2)>/gm,s;for(;s=r.exec(g);){let[,o,n,a]=s,u=o.toLowerCase()+n,c=a!=null?$(a):!0;typeof c=="string"?t[u]=e(c):Array.isArray(t[u])?t[u].push(c):t[u]=t[u]!=null?[t[u],c]:ee[u]?[c]:c}return Object.keys(t).length?t:e(g)};var re=C;export{C as S3,re as default};
//# sourceMappingURL=index.js.map
